---
title: "The tidyverse"
format: html
execute:
  warning: false
---

> ![](figures/03-tidyverse.png){style="float:right;" width="201"} "The tidyverse is an **opinionated collection of R packages designed for data science**. All packages share an underlying **design philosophy, grammar, and data structures**." -- <https://www.tidyverse.org/>

## Case study: customer bookings data

A travel price aggregator website company wants to analyze its booking data to optimize the website's usability and thus improve their customers' travel experience.

The data^[Data source: <https://github.com/drsimonj/tidyverse_tutorial-useR2018/tree/master/data>] is organized into two files: 

- `bookings.csv`: hotel bookings
- `properties.csv`: hotel facilities


![](figures/03-expedia.png){ width=50% fig-align="center" }

### Load tidyverse packages

```{r}
#| label: load-tidyverse
#| message: true
library(tidyverse)
```

The tidyverse contains `r length(tidyverse::tidyverse_packages(include_self = FALSE))` packages. 
When running `library(tidyverse)`, only the **core** [tidyverse packages](https://www.tidyverse.org/packages/) 
become available in your current `R` session. 

The core packages are:

- `ggplot2`: creation of graphics
- `dplyr`: data wrangling
- `tidyr`: data reshaping
- `readr`: import of flat data files, e.g. csv
- `tibble`: enhanced data frames
- `stringr`: string manipulation
- `forcats`: factor manipulation
- `purrr`: functions for working with list columns
- `lubridate`: functions for working with date-time columns

![Tidyverse packages for common activities of a data science workflow.^[Figure source: <https://rviews.rstudio.com/2017/06/08/what-is-the-tidyverse/>]](figures/03-tidyverse_overview.png){ width=50% fig-align="center" }

```{r}
#| label: load-bookings
#| message: true
bookings <- read_csv("data/bookings.csv")
bookings
```

Get an overview wit `glimpse()`:

```{r}
#| label: glimpse
glimpse(bookings)
```

## Data wrangling with `dplyr`

> dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges. -- <https://dplyr.tidyverse.org/>

- get an overview of a tibble with `glimpse()`
- select a subset of columns with `select()`
- filter a subset of rows with `filter()`
- add new or change existing columns with `mutate()`
- pick a subset of rows with `slice()`
- reorder rows with `arrange()`
- group rows by a grouping column with `group_by()`
- calculate a summary (per group) with `summarize()`
- join two distinct tibbles by a common column with `*join()`
- ... (and more)


### Select columns with `select()`

![](figures/03-dplyr_select.png){ width=50% fig-align="center" }

Select the column `review_score`:

```{r}
#| label: select-1
select(bookings, review_score)
```

The output is **always** a `data.frame` / `tibble`, regardless of whether a single or multiple columns are selected. 

This is in line with the consistent API design of most dplyr functions:

1. The first argument is a data frame
1. The output is usually also a data frame

Select multiple columns by specifying column names as additional arguments:

```{r}
#| label: select-2
select(bookings, review_score, status)
```

Exclude columns with negative selection: select all but specific columns using `-`.

```{r}
#| label: select-3
select(bookings, -booker_id)
```

### Helper functions for `select()`

**Helper functions** make it easy to select multiple columns whose names match a particular criterion.

Helper function            | Description
:------------------------- | :----------------------------
`contains("abc")`          | Names containing `"abc"`
`starts_with("abc")`       | Names starting with `"abc"`
`ends_with("abc")`         | Names ending with `"abc"`
`num_range("a", 1:3)`      | Names matching the numerical range `a1`, `a2`, `a3`
`any_of(c("ab", "c"))`     | Any of the names within a character vector
`all_of(c("ab", "c"))`     | All of the names within a character vector
`matches(".id")`           | Names matching the regular expr. `".id"`
`everything()`             | All (remaining) names
`last_col()`               | Last column

Example:

> Select all columns whose names either contain 'id' or end with 'night'.

```{r}
#| label: select-helper-1
select(bookings, contains("id"), ends_with("night"))
```



### Filter rows with `filter()`

![](figures/03-dplyr_filter.png){ width=50% fig-align="center" }

Example: 

> Filter bookings that were completed and not canceled.

```{r}
#| label: filter-1
filter(bookings, status == "stayed")
```

Combine multiple conditions with `&`.

```{r}
#| label: filter-3
filter(
  bookings, 
  status == "stayed" & 
    !is.na(review_score) & 
    price_per_night >= 90 & 
    price_per_night <= 120
)
```

### Sort rows with `arrange()`

```{r}
#| label: arrange-1
arrange(bookings, price_per_night) # default: sort in ascending order
```


```{r}
#| label: arrange-2
arrange(bookings, desc(price_per_night))
```

### Select rows by position with `slice()`

```{r}
#| label: slice-1
x <- arrange(bookings, desc(review_score))
slice(x, 1:10)
```

```{r}
#| label: slice-2
x <- arrange(bookings, desc(review_score))
y <- select(x, review_score, everything())
slice(y, 1:10)
```

## Chaining multiple operations

Example:

> For all bookers who didn't cancel their trip and checked in on a friday, we are interested in the 5 highest review scores. Only the columns `price_per_night` and `review_score` should be included in a new tibble which is sorted by `review_score` in descending order. 

### The pipe operator `|>`

- The **pipe operator** `|>` is used to pass information from one operation to the next.
- Its main purpose is to **express a sequence of operations**.
- Using the pipe, a function's output becomes the first argument of the subsequent function.
- Thus, the pipe operator helps to write **code that is easy to read and understand**.

```{r}
#| label: pipe-1
bookings |>
  filter(status != "cancelled" & checkin_day == "fri") |>
  arrange(desc(review_score)) |>
  slice(1:5) |>
  select(price_per_night, review_score)
```

Read:

> "From table `bookings`,  
> filter all non-canceled bookings with check-in on a Friday  
> THEN sort by review score in descending order  
> THEN take the top-5 bookings  
> THEN return price per night and review score."

## Adding new columns with `mutate()`

Create a new column for the **total price** of a booking, which 
is the product of `price_per_night` and `room_nights`. 

```{r}
#| label: mutate-1
bookings |>
  mutate(total_price = price_per_night * room_nights)
```

- Syntax: mutate(name of new variable = equation)
- Note that a new variable will be appended as the last column of the data frame.

```{r}
#| label: mutate-2
bookings |>
  mutate(total_price = price_per_night * room_nights, .after = price_per_night)
```

## Summarize many rows with `summarize()`

`summarize()` (or `summarise()`) performs some kind of aggregation on grouping variables and returns a summary table with fewer rows. 

![](figures/03-dplyr_summarize.png){ width=50% fig-align="center" }

A single one-valued stat:

> What is the average review score over all bookings?

```{r}
#| label: summary-1
bookings |>
  summarize(review_score = mean(review_score, na.rm = TRUE))
```

(one row, one column)

Multiple one-valued stats:

> What is the total number of bookings, the number of bookings without review score, and the average review score over all bookings?

```{r}
#| label: summary-2
bookings |>
  summarize(
    n = n(), # Total no. of bookings
    n_miss = sum(is.na(review_score)), # No. of bookings w/o review score
    review_score = mean(review_score, na.rm = TRUE) # Avg. review score
  ) 
```

(one row, multiple columns)

Multiple n-valued stats:

> What is the price range over all bookings?

```{r}
#| label: summary-3
bookings |>
  reframe(statistic = c("min", "max"), value = range(price_per_night))
```

(multiple rows, multiple columns)

Note that `summarize()` is for one-row summaries only. For multi-row aggregations, we can use `reframe()`.

## Grouping with `group_by()`

`group_by()` lets us perform operations for each _group_ separately.

```{r}
#| label: group-by-0
bookings |>
  group_by(for_business) |> 
  summarize(n = n(), review_avg = mean(review_score, na.rm = TRUE))
```

## Count the number of rows per group with `count()`

```{r}
#| label: count-1
bookings |>
  count(for_business, status)
```

## Combining multiple data frames

> What is the number of bookings per destination (city)?

To answer this question, we have to combine the two data frames `bookings` and `properties`.

```{r}
#| label: load-properties
properties <- read_csv("data/properties.csv")
properties
```

Example: **inner join**^[Figure source: <https://github.com/gadenbuie/tidyexplain>]  

Join two data frames `x` and `y`. 
The result is a data frame containing all rows from `x` with matching values in 
`y` for column `id` and all columns from `x` and `y`.

![](figures/03-inner-join.gif){ width=50% fig-align="center" }

```{r}
#| label: inner-join
bookings |>
  inner_join(properties, by = "property_id") |>
  count(destination)
```

## Reshape data frames with [`tidyr`](https://tidyr.tidyverse.org/)

The `tidyverse` inherits its name from the term **tidy data**. 
Tidy data refers to a specific standardized dataset structure.

Characteristics of tidy data:

1. Each **variable** must have its own column.
1. Each **observation** must have its own row.
1. Each **value** must have its own cell.

Many of the tidyverse functions require a _tidy_ data frame input. 
The `tidyr` package contains functions to reshape "messy" into tidy data frames. 

We will often encounter untidy data, as it is sometimes easier to input information into a spreadsheet in a disorganized manner.

![](figures/03-tidyr_long_wide.png){ width=50% fig-align="center" }

### `pivot_longer()` and `pivot_wider()`

`tidyr`'s two main functions are `pivot_longer()` and `pivot_wider()`. 

- `pivot_longer()` takes multiple columns and collapses them into **key-value pairs**.
- `pivot_wider()` takes two or more columns (i.e., a key-value pair) and spreads them into **multiple columns**. 

![](figures/03-tidyr_pivot.png){ width=50% fig-align="center" }

### Reshaping from "long" to "wide"

Compute the number of bookings per city and day:

```{r}
#| label: long-wide
day_order <- c("mon", "tue", "wed", "thu", "fri", "sat", "sun")
df <- bookings |> inner_join(properties, by = "property_id")
checkin_count <- df |>
  count(destination, checkin_day) |>
  mutate(checkin_day = factor(checkin_day, levels = day_order)) |>
  arrange(destination, checkin_day)
checkin_count
```

```{r}
#| label: checkin-count-wider
checkin_count |>
  pivot_wider(names_from = checkin_day, values_from = n)
```



```{r}
#| label: longer-2
checkin_count |>
  pivot_wider(names_from = checkin_day, values_from = n) |>
  pivot_longer(cols = -destination, names_to = "checkin_day", values_to = "n")
```
